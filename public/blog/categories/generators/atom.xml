<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: generators | console.blog( this.thought )]]></title>
  <link href="http://blog.peterdecroos.com/blog/categories/generators/atom.xml" rel="self"/>
  <link href="http://blog.peterdecroos.com/"/>
  <updated>2014-02-08T20:26:00-08:00</updated>
  <id>http://blog.peterdecroos.com/</id>
  <author>
    <name><![CDATA[Peter de Croos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Functional programming with ecmascript6 generators]]></title>
    <link href="http://blog.peterdecroos.com/blog/2014/02/08/functional-programming-with-ecmascript6-generators/"/>
    <updated>2014-02-08T19:12:00-08:00</updated>
    <id>http://blog.peterdecroos.com/blog/2014/02/08/functional-programming-with-ecmascript6-generators</id>
    <content type="html"><![CDATA[<p>The web is abuzz right now with ecmascript 6 on the horizon. If you get not 0.11,
you can use them already server side. Once of the big features I'm excited about
are generators.</p>

<p>I've <a href="http://blog.peterdecroos.com/blog/2014/01/22/javascript-generators-first-impressions/">blogged about them previously</a>
Alas, I've only found nothing out there on the web that covers anything beyond basic
instatiation and invocation. With just that to go on, it was hard for me to initially see
the hype. A few days ago, I had an appifany.</p>

<p>Generators are first class objects and like functions, they can be composed from smaller parts. Therefore,
much of we know about functions can be applied to generators!</p>

<p>On that note, I will lay the ground work for understanding how to really USE generators.</p>

<h3>It all starts with a bind</h3>

<p>If you've worked with javascript for any of length of time, You should be familiar with bind.</p>

<p>{%codeblock lang:javascript %}
  var bind = function(fn, ctx, args) {</p>

<pre><code>args = Array.prototype.slice.apply(arguments, 2);
return function() {
  args2 = Array.prototype.slice.apply(arguments);
  return fn.apply(this, arguments);
}
</code></pre>

<p>  }
{% endcodeblock %}</p>

<p>A function has 2 diffrent modes, literal and called.</p>

<ul>
<li><p>Literal: a function itself, its not being run.
{%codeblock lang:javascript %}
var something = function() {
console.log('do something');
}
{% endcodeblock %}</p></li>
<li><p>Called: running the function which gives us its return value along with side effects.</p></li>
</ul>


<p>{%codeblock lang:javascript %}
something();
{% endcodeblock %}</p>

<p>The bind is implimented by taking a literal function and calling it within another
literal function passing along the context and possible arguments using .apply().</p>

<p>A Generator has 3 states,
  1. Literal: A literal Generator function
 {%codeblock lang:javascript %}
var Gen = function *() {
  var value = yield asyncTask();
  return value;
};
 {% endcodeblock %}
  2. Instantiated: a runnable instance is created by calling the Generator function
 {%codeblock lang:javascript %}
var gen = Gen();
 {% endcodeblock %}</p>

<ol>
<li>Run: You can then iterate through the generator by calling next()
{%codeblock lang:javascript %}
gen.next();
{% endcodeblock %}</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[koa: zero to todo list]]></title>
    <link href="http://blog.peterdecroos.com/blog/2014/02/01/koa-zero-to-todo-list/"/>
    <updated>2014-02-01T17:12:00-08:00</updated>
    <id>http://blog.peterdecroos.com/blog/2014/02/01/koa-zero-to-todo-list</id>
    <content type="html"><![CDATA[<h2>Note: you need to run node 0.11 with --harmony to run the code.</h2>

<p>From the creators of express comes a brand new framework for node powered by
the new ecmascript 6 generators syntax. <a href="http://koajs.com/">Koa</a> is an interesting
reimagining of how we will be able to build web applications in javascript.</p>

<h3>The old paradigm</h3>

<p>In the standard node library, The 'http' module is used to create servers.</p>

<p>{%codeblock lang:javascript %}</p>

<p>var server = http.createServer(function(req, res) {
  res.writeHead(200, {'Content-Type': 'text/plain'});
  //server logic goes here
  res.end('');
});</p>

<p>server.listen(3000, '127.0.0.1');
console.log('listening on port 3000');</p>

<p>{% endcodeblock %}</p>

<p>Express exposes a function that we can give to
http.createServer as a callback. Express middleware is a set of functions that
take 3 arguments, req, res and next. The middleware performs some operations, modifies
either the request or response objects and passed down to the next middleware in the stack
by calling next(). Its akin to a water flow model where the the response ends somewhere
near the end of the middleware stack.</p>

<h3>Enter Koa, The generators based framework</h3>

<p>Like express, Koa works internatlly by generating a callback that can be passed to
http.createServer().  Unlike Express, it uses generators to provide a much more fine grained
model of control flow.</p>

<p>A very basic koa app looks like this, lets make it serve up the contents of a file</p>

<p>{%codeblock lang:javascript %}
var koa          = require('koa');
var Promise      = require('bluebird');</p>

<p>//creates promise yielding versions of fs
var fs = Promise.promisifyAll(require('fs'));
//create the koa instance
var app = koa();</p>

<p>app.use(function *(next) {
  //here's an example middleware that logs to the console
  console.log('timestamp: before request => ', time.now());
  yield next
  console.log('timestamp: after request  => ', time.now());
});</p>

<p>app.use(function *() {
  this.body = yield fs.readFileAsync('./app.js', 'utf8');
});</p>

<p>app.listen(3000);
console.log('now listening on port 3000');</p>

<p>{% endcodeblock %}</p>

<p>Unlike Express, the middleware is written using generators.
Downstream middleware in Koa flows upstream on return. Middleware
yields down stream by explicitly calling 'yield next.'. Upon return, the control
flow yields back up to where the upstream middleware yielded downstream.</p>

<p>Where Express passes native node req and res obects through to each function, Koa
manages a context where it encapsulates them behind an interface. They are still available
thrugh the 'this' keyword as this.req and this.res. However, Its not reccomended in
the docs that you work with these native objects. One could imagine calling this.res.end('')
would throw a monkey wrench in the control flow. Instead you are suppossed to work through
the this.response and this.request. Most of the methods are aliased directly to this. 'this.body'
for example, is aliased to this.response.body.</p>

<p>There does not yet appear to be a direct way to get
to the request body. The co-body parser accesses the req.body directly so while the docs say
don't do it, Koa is still young so you may have to get your hands dirty.</p>

<h3>A Todo app in koa</h3>

<p>Now that we've covered the basics, lets try something a little more complex. A todo
List seems like a good thing no one has ever tried to make before in any technology ever!
To simplify assumptions, lets just store the todos in memory.</p>

<p>By itself, Koa is very minimalistic. It does not provide body parsing, sessions, or
routing in the core. Unfortunatly Koa is still young so there just aren't that many
npm modules for it just yet. A quick search on <a href="https://github.com/koajs/koa/wiki">the Koa website</a>
shows that we do have the necessary modules for a basic todo.</p>

<ol>
<li><a href="https://github.com/koajs/route">koa-route</a>: for routing</li>
<li><a href="https://github.com/visionmedia/co-body">co-body</a>: for parsing the body of post requests</li>
<li><a href="https://github.com/koajs/static">koa-static</a>: for serving up static assets</li>
</ol>


<p>Here's the basic server side api
{%codeblock lang:javascript %}
//jshint esnext
var koa          = require('koa');
var staticServer = require('koa-static');</p>

<p>//this allows us to parse the native req object to get the body
var parse        = require('co-body');</p>

<p>var router       = require('koa-route');
var _            = require('underscore');</p>

<p>var Promise      = require('bluebird');
var path         = require('path');</p>

<p>var fs = Promise.promisifyAll(require('fs'));
var app = koa();
//our very basic data store
var todos = [];</p>

<p>//gets us unique ids
var counter = (function() {
  var count = 0;
  return function() {</p>

<pre><code>count++;
return count;
</code></pre>

<p>  };
})();</p>

<p>//serve up the public directory where we have all the assets
app.use(staticServer(path.join(__dirname, 'public')));</p>

<p>app.use(router.post('/todos', function <em>() {
  /</em></p>

<pre><code>yield lets us pass asynchronous functions that return promises or thunks
It will freeze the middleware till its resolved and pass it back in.
</code></pre>

<p>  */
  var todo = (yield parse.json(this));</p>

<p>  todo.id = counter();
  todos.push(todo);
  this.body = JSON.stringify(todos);
}));</p>

<p>app.use(router.get('/todos', function *() {
  this.body = JSON.stringify(todos);
}));</p>

<p>app.use(router.delete('/todos/:id', function *(id) {
  todos = _(todos).reject(function(todo) {</p>

<pre><code>console.log('what? ', todo, id );
return todo.id === parseInt(id, 10);
</code></pre>

<p>  }, this);
  this.body = JSON.stringify(todos.sort(function(a, b) { return a - b;}));
}));</p>

<p>app.listen(3000);
console.log('listening on port 3000');
{% endcodeblock %}</p>

<p><a href="https://github.com/cultofmetatron/koa-todo">Download the code on github</a>
The github version includes frontend code.</p>

<h4>A few things of note:</h4>

<p>The 'yield' keyword ca do some interesting things. If we pass into it
an asynchronous function that returns a thunk or promise, it will stop execution of
the middleware and wait till it resolves. It then returns the value of the promse or thunk
and resumes the generator. This is a hell of alot easier to read.</p>

<h4>A word of caution</h4>

<p>The 'yield' keyword lets us do some safe blocking but it isn't always the ideal solution.
While the event loop itself isn't blocked by it the way futures can, it does block resuming
of any operations that occur after it.</p>

<p>For example, if we run three asyncronous operations top to bottom that do not depend on
each other, like the following...</p>

<p>{%codeblock lang:javascript %}
app.use(function *() {
  var a = yield async1();
  var b = yield async2();
  var c = yield async3();
});
{% endcodeblock %}</p>

<p>This completely defeats the purpose of node's (almost automatic) concurrency. When we call
async1, we are blocking until async2 runs. This is unoptimal. It would be better to get the promises
for the three functions and yield on a merged promise.</p>

<p>{%codeblock lang:javascript %}
app.use(function *() {
  var a = async1();
  var b = async2();
  var c = async3();
  var result = yield Promise.all([a, b, c]);
});
{% endcodeblock %}</p>

<p>I'm excited to cut my teeth on sme bigger problems. As the frameowrk matures, Its going to
allow more fine grained control for how we write the next generation of web applications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript generators: first impressions]]></title>
    <link href="http://blog.peterdecroos.com/blog/2014/01/22/javascript-generators-first-impressions/"/>
    <updated>2014-01-22T16:03:00-08:00</updated>
    <id>http://blog.peterdecroos.com/blog/2014/01/22/javascript-generators-first-impressions</id>
    <content type="html"><![CDATA[<p>Ecmascript 6 (harmony) is coming out soon and one of the most exciting features
it offers are generators. Generators are a minimalist flow control system that gives
a much finer grained level of control than we were afforded up till now.</p>

<blockquote><p>Note: the code in this blog will only run in node v0.11.x when run as --harmony.</p></blockquote>

<p>Like a function, a generator is an object that declares some behavior. Its first class
just like javascript functions and you can pass it around as values and return them from other
functions.</p>

<p>A generator is declared like a function only with a '*' before the parens.
We then create an instance of the generator by calling it.</p>

<p>Here's a basic example.</p>

<p>{% codeblock lang:javascript %}
var myGenerator = function *() {
  var foo = yield 5;
  console.log('this doesn't get written until the second call to next()');
};</p>

<p>var gen = myGenerator();
var state = gen.next();
console.log(state.value) //=> 5</p>

<p>{% endcodeblock %}</p>

<p>When we run gen.next(), the code executes until we get to yield. The generator
then stops which is why the console.log() does not get called. The state of the
generator is returned by next which gives us two things.</p>

<ol>
<li>state.value: the value on the right side of the yield; in this case 5.</li>
<li>state.done: a boolean that returns true if there are no more yields in the generator.</li>
</ol>


<p>We've called gen.next() the one time. The second time we call gen.next(), we have the option
of passing in an argument to it that will be returned by yield inside the generator.</p>

<p>This example shows a more advanced example of bidirectional passing.</p>

<p>{% codeblock lang:javascript %}
var myGenerator = function *() {
  var firstWord = yield 5;
  console.log(firstWord); //=> "hello"
  var secondWord = yield 10;
  console.log(secondWord); //=> "world"
};</p>

<p>var gen = myGenerator();
var state = gen.next();
console.log(state.value); //=> 5
state = gen.next("hello");
//=> 'hello' gets printed to the screen from inside the generator
console.log(state.value); //=> 10
console.log(state.done); //=> false
state = gen.next('world');
//=> 'world' gets printed
console.log(state.value); //=> 10
console.log(state.done);  //=> true</p>

<p>{% endcodeblock %}</p>

<p>One of the biggest growing pains of javascript development is wrapping one's
head around async programming and functions run asyncronously. Promises give us a
value that represents the eventual value returned from an asynchronous function.</p>

<p>Promises are promised in ecmascript 6 but they aren't available when I run node 0.11
with --harmony  yet so I use <a href="https://github.com/petkaantonov/bluebird">Bluebird</a></p>

<p>{% codeblock lang:javascript %}
var Promise = require('bluebird');</p>

<p>//extends node's fileSytem with versions of the async functions that return promises
//the promisified versions are the original name + 'Async'
var fs = Promise.promisifyAll(require('fs'));</p>

<p>fs.readFileAsync('.gitignore',  'utf8').then(function(contents) {
  console.log(contents); // prints the contents of the .gitignore file.
});</p>

<p>console.log('this runs before the callback passed to "then" which is counterintuitive.')
{% endcodeblock %}</p>

<p>This code Works because when the function is called, it creates a closure that doesn't get
garbage collected because the function passed to the promise retains a reference to this scope.
When its called, it can operate on variables in this containing scope. However we
cannot return to the original function call. Thus Unless you are used to thinking about promises,
its a bit unintuitive that the console.log on the following line runs before the callback passed
to the then() handler of the promise.</p>

<p>Generators on the other hand, let us FREEZE the execution context until the file resolves.</p>

<p>There's an excellent library called
<a href="https://github.com/visionmedia/co">co</a> from the creator of express that allows
us to create coroutines using generators. thus we could write the previous code using
generators.</p>

<p>{% codeblock lang:javascript %}
var Promise = require('bluebird');
var fs = Promise.promisifyAll(require('fs'));
var co = require('co');</p>

<p>co(function *(){
  var a = yield fs.readFileAsync('.gitignore',  'utf8');
  console.log(a); //this doesn't run until the previous function resolves.
  var c = yield fs.readFileAsync('package.json', 'utf8');
  console.log(a);
  console.log(c);
  return;
})();</p>

<p>{% endcodeblock %}</p>

<p>This is pretty exciting, This Asyncrouous code looks downright synchronous. Its also running
in its own context so it doesn't block the event loop. Within the generator, we can write
much more fine grained flow control for asynchronous functions.</p>

<p>That said, how does co work? The basic premise is that we use yield to pass back the promise
into co where it waits till the function resolves. Then we call the next() of this function
passing in the value from the resolved promise.</p>

<p>co itself is extremely flexible allowing you to pass in thunks, or A+spec promises into
yield. Here I'll demonstrate a simplified version that can accept only promises.</p>

<p>{% codeblock lang:javascript %}
var co = function(fngen) {
  /<em>
  next takes a instatiated generator and calls
  and a value returned from calling next on it
  gen is an instance of a generator
  yieldable is the value returned from calling gen.next()
  </em>/
  var next = function(gen, yieldable) {</p>

<pre><code>if (! yieldable.done) { //if 
  //we assume yieldable.value is a promise so we call then() to get the value
  yieldable.value.then(function(val) {
    /*
    we call next on gen and pass in the value into gen.next() to 
    inject the value back into out coroutine where it gets returned
    by the yield in the generator. 

    By call gen.next(val), gen resumes execustion passing val back 
    and gen.next() return when it hits the next yield keyword returning 
    the value passed in to yield.
    */
    next(gen, gen.next(val));
  });
}
</code></pre>

<p>  };</p>

<p>  return function() {</p>

<pre><code>//instatiate the generator
var gensym = fngen();
//get the first yieldable
var yieldable = gensym.next();
if (!yieldable.done) {
  next(gensym, yieldable);
}
</code></pre>

<p>  };
};</p>

<p>{% endcodeblock %}</p>

<p>The concept is pretty simple, yield passed back the value on the right to gen.next()
which it returns. The value we pass into the gen.next call to gen.next() becomes
the value returned by yield. Sorta like a zig zag or a needle stitching.</p>

<p>I'm excited to see some of the new projects that will take advantage of this new
ecmascript 6 feature. One big example comming to mind is the new koa framework. Unlike
its predecessor express/connect, Koa is a set of pluggable middleware components
that utilize generators heavily for flow control.</p>
]]></content>
  </entry>
  
</feed>
