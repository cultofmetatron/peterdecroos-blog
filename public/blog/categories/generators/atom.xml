<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: generators | console.blog( this.thought )]]></title>
  <link href="http://blog.peterdecroos.com/blog/categories/generators/atom.xml" rel="self"/>
  <link href="http://blog.peterdecroos.com/"/>
  <updated>2014-02-08T23:57:43-08:00</updated>
  <id>http://blog.peterdecroos.com/</id>
  <author>
    <name><![CDATA[Peter de Croos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Functional programming with ecmascript6 generators]]></title>
    <link href="http://blog.peterdecroos.com/blog/2014/02/08/functional-programming-with-ecmascript6-generators/"/>
    <updated>2014-02-08T19:12:00-08:00</updated>
    <id>http://blog.peterdecroos.com/blog/2014/02/08/functional-programming-with-ecmascript6-generators</id>
    <content type="html"><![CDATA[<p>The web is abuzz right now with ecmascript 6 on the horizon. If you get node 0.11,
you can use it server side already. Once of the big features I'm excited about
are generators.</p>

<p>I've <a href="http://blog.peterdecroos.com/blog/2014/01/22/javascript-generators-first-impressions/">blogged about them previously</a>
Alas, I've only found nothing out there on the web that covers anything beyond basic
instatiation and invocation. With just that to go on, it was hard for me to initially see
the hype. A few days ago, I had an appifany.</p>

<p>Generators are first class objects. Like functions, they can be composed from smaller parts. Therefore,
much of we know about functions can be applied to generators!</p>

<p>On that note, I will lay the ground work for understanding how to really USE generators.</p>

<h3>It all starts with a bind</h3>

<p>If you've worked with javascript for any of length of time, You should be familiar with bind.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">bind</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">args</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">args2</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A function has 2 diffrent modes, literal and called.</p>

<ul>
<li><p>Literal: a function itself, its not being run.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">something</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;do something&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p>Called: running the function which gives us its return value along with side effects.</p></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">something</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The bind is implimented by taking a literal function and calling it within another
literal function passing along the context and possible arguments using .apply().</p>

<p>A Generator has 3 states,
  1. Literal: A literal Generator function
 <div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Gen</span> <span class="o">=</span> <span class="kd">function</span> <span class="o">*</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">asyncTask</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div>
  2. Instantiated: a runnable instance is created by calling the Generator function
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">gen</span> <span class="o">=</span> <span class="nx">Gen</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ol>
<li>Run: You can then iterate through the generator by calling next()
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gen</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ol>


<p>Unlike a function, We are going to compose generators to be run inside of a co() function.
Co will run a generator until it comes accross a yield. Whatever is on
right side of the yield will be passed into co. the generator will be frozen until the
value can be resolved. This includes thunks, promises and even other generators!</p>

<p>A generator equivilent for a bind looks like this.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">bind</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">genFunc</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span> <span class="o">*</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nx">yield</span> <span class="nx">genFunc</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Like functions, generators also have a call() and apply() methods which can be used
to invoke the function with an explicit context. The yield is there because when we
run this new function inside co(), the instantiated generator will be run and the
return value will be be spat out to be returned by this generator.</p>

<p>With that in mind, How about a function that takes two generators and runs one inside
the other? How would we impliment that?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">join</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">gen1</span><span class="p">,</span> <span class="nx">gen2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span> <span class="o">*</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="nx">yield</span> <span class="nx">gen1</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">gen2</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>With this function in place, we can now run two generators back to back inside
a single coroutiine function.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">co</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;co&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">co</span><span class="p">(</span><span class="nx">join</span><span class="p">(</span><span class="kd">function</span> <span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">next</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// =&gt; &#39;hello world&#39;;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">foo</span><span class="p">;</span>
</span><span class='line'><span class="p">},</span> <span class="kd">function</span> <span class="o">&lt;</span><span class="err">/em&gt;() {</span>
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;hello world&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">})).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you are interested in exploring this subject further, I'm working on a javacript
library for composing generators called <a href="https://github.com/cultofmetatron/Shen">Shen</a>.
Its a toolkit for composing generators for running inside co like lego pieces.</p>

<p>To give you a taste of its power, Instead of join,
<a href="https://github.com/cultofmetatron/Shen">Shen</a> implements cascade which allows you to
merge 1 or more generators.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">shen</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;shen&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">co</span><span class="p">(</span><span class="nx">shen</span><span class="p">.</span><span class="nx">cascade</span><span class="p">(</span>
</span><span class='line'>  <span class="kd">function</span> <span class="o">*</span><span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="c1">//each yield freezes the generator until the next returns.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nx">yield</span> <span class="nx">next</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span>
</span><span class='line'>  <span class="kd">function</span> <span class="o">*</span><span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="nx">yield</span> <span class="nx">next</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">shen</span><span class="p">.</span><span class="nx">cascade</span><span class="p">(</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">function</span> <span class="o">*</span><span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//thats right, you can nest them too!</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">yield</span> <span class="nx">next</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="kd">function</span> <span class="o">*</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">})))();</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="cm">/* Outputs&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;pre&gt;&lt;code&gt;1</span>
</span><span class='line'><span class="cm">2</span>
</span><span class='line'><span class="cm">3</span>
</span><span class='line'><span class="cm">2</span>
</span><span class='line'><span class="cm">1</span>
</span><span class='line'><span class="cm">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;p&gt;  */</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Shen functions all compose with each other allowing you to put together generators
as easily as you would curry a function.</p>

<p>In addition to cascade and bind, Shen also currently includes...</p>

<ul>
<li>branch and dispatch for conditional logic</li>
<li>delay for... delaying?</li>
<li>parallel: run several generators and get back an array of the return values</li>
<li>oscillator: run a generator at a specific interval and get back an immediate event emitter
that fires with the latest returned value of the generator</li>
</ul>


<p>Current use-cases off the top of my head include using oscillator and parrallel to run several
network requests at the same time. you'd get an event emitter with all the returned values in
one place. One thing to note is that you can't completely escape callbacks but you can create
areas in your code where callbacks are invisible. The generator takes care of the hard stuff.</p>

<p>Its still very much a work in progress and only works on node 0.11 but I invite you all to try it out.
If you want to help, I'm always welcome to new ideas for pieces to add to the ecosystem.
contributing a few tests or implementations of ideas would be great too!</p>

<p><a href="https://github.com/cultofmetatron/Shen">Here's the github to the project</a></p>

<p>Cheers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[koa: zero to todo list]]></title>
    <link href="http://blog.peterdecroos.com/blog/2014/02/01/koa-zero-to-todo-list/"/>
    <updated>2014-02-01T17:12:00-08:00</updated>
    <id>http://blog.peterdecroos.com/blog/2014/02/01/koa-zero-to-todo-list</id>
    <content type="html"><![CDATA[<h2>Note: you need to run node 0.11 with --harmony to run the code.</h2>

<p>From the creators of express comes a brand new framework for node powered by
the new ecmascript 6 generators syntax. <a href="http://koajs.com/">Koa</a> is an interesting
reimagining of how we will be able to build web applications in javascript.</p>

<h3>The old paradigm</h3>

<p>In the standard node library, The 'http' module is used to create servers.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">});</span>
</span><span class='line'>  <span class="c1">//server logic goes here</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;listening on port 3000&#39;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Express exposes a function that we can give to
http.createServer as a callback. Express middleware is a set of functions that
take 3 arguments, req, res and next. The middleware performs some operations, modifies
either the request or response objects and passed down to the next middleware in the stack
by calling next(). Its akin to a water flow model where the the response ends somewhere
near the end of the middleware stack.</p>

<h3>Enter Koa, The generators based framework</h3>

<p>Like express, Koa works internatlly by generating a callback that can be passed to
http.createServer().  Unlike Express, it uses generators to provide a much more fine grained
model of control flow.</p>

<p>A very basic koa app looks like this, lets make it serve up the contents of a file</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">koa</span>          <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;koa&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Promise</span>      <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;bluebird&#39;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">//creates promise yielding versions of fs</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">promisifyAll</span><span class="p">(</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">));</span>
</span><span class='line'><span class="c1">//create the koa instance</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">koa</span><span class="p">();</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span> <span class="o">*</span><span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//here&#39;s an example middleware that logs to the console</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;timestamp: before request =&gt; &#39;</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">now</span><span class="p">());</span>
</span><span class='line'>  <span class="nx">yield</span> <span class="nx">next</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;timestamp: after request  =&gt; &#39;</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">now</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span> <span class="o">*</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileAsync</span><span class="p">(</span><span class="s1">&#39;./app.js&#39;</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;now listening on port 3000&#39;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Unlike Express, the middleware is written using generators.
Downstream middleware in Koa flows upstream on return. Middleware
yields down stream by explicitly calling 'yield next.'. Upon return, the control
flow yields back up to where the upstream middleware yielded downstream.</p>

<p>Where Express passes native node req and res obects through to each function, Koa
manages a context where it encapsulates them behind an interface. They are still available
thrugh the 'this' keyword as this.req and this.res. However, Its not reccomended in
the docs that you work with these native objects. One could imagine calling this.res.end('')
would throw a monkey wrench in the control flow. Instead you are suppossed to work through
the this.response and this.request. Most of the methods are aliased directly to this. 'this.body'
for example, is aliased to this.response.body.</p>

<p>There does not yet appear to be a direct way to get
to the request body. The co-body parser accesses the req.body directly so while the docs say
don't do it, Koa is still young so you may have to get your hands dirty.</p>

<h3>A Todo app in koa</h3>

<p>Now that we've covered the basics, lets try something a little more complex. A todo
List seems like a good thing no one has ever tried to make before in any technology ever!
To simplify assumptions, lets just store the todos in memory.</p>

<p>By itself, Koa is very minimalistic. It does not provide body parsing, sessions, or
routing in the core. Unfortunatly Koa is still young so there just aren't that many
npm modules for it just yet. A quick search on <a href="https://github.com/koajs/koa/wiki">the Koa website</a>
shows that we do have the necessary modules for a basic todo.</p>

<ol>
<li><a href="https://github.com/koajs/route">koa-route</a>: for routing</li>
<li><a href="https://github.com/visionmedia/co-body">co-body</a>: for parsing the body of post requests</li>
<li><a href="https://github.com/koajs/static">koa-static</a>: for serving up static assets</li>
</ol>


<p>Here's the basic server side api
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//jshint esnext</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">koa</span>          <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;koa&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">staticServer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;koa-static&#39;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">//this allows us to parse the native req object to get the body</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">parse</span>        <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;co-body&#39;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">router</span>       <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;koa-route&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">_</span>            <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;underscore&#39;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">Promise</span>      <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;bluebird&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">path</span>         <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">promisifyAll</span><span class="p">(</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">));</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">koa</span><span class="p">();</span>
</span><span class='line'><span class="c1">//our very basic data store</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">todos</span> <span class="o">=</span> <span class="p">[];</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">//gets us unique ids</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">counter</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="nx">count</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">};</span>
</span><span class='line'><span class="p">})();</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">//serve up the public directory where we have all the assets</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">staticServer</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;public&#39;</span><span class="p">)));</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/todos&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="err">/&lt;/em&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">yield</span> <span class="nx">lets</span> <span class="nx">us</span> <span class="nx">pass</span> <span class="nx">asynchronous</span> <span class="nx">functions</span> <span class="nx">that</span> <span class="k">return</span> <span class="nx">promises</span> <span class="nx">or</span> <span class="nx">thunks</span>
</span><span class='line'><span class="nx">It</span> <span class="nx">will</span> <span class="nx">freeze</span> <span class="nx">the</span> <span class="nx">middleware</span> <span class="nx">till</span> <span class="nx">its</span> <span class="nx">resolved</span> <span class="nx">and</span> <span class="nx">pass</span> <span class="nx">it</span> <span class="nx">back</span> <span class="k">in</span><span class="p">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="o">*</span><span class="err">/</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">todo</span> <span class="o">=</span> <span class="p">(</span><span class="nx">yield</span> <span class="nx">parse</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="k">this</span><span class="p">));</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">todo</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">counter</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">todos</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">todo</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">todos</span><span class="p">);</span>
</span><span class='line'><span class="p">}));</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/todos&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="o">*</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">todos</span><span class="p">);</span>
</span><span class='line'><span class="p">}));</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="s1">&#39;/todos/:id&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="o">*</span><span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">todos</span> <span class="o">=</span> <span class="nx">_</span><span class="p">(</span><span class="nx">todos</span><span class="p">).</span><span class="nx">reject</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">todo</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;what? &#39;</span><span class="p">,</span> <span class="nx">todo</span><span class="p">,</span> <span class="nx">id</span> <span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="nx">todo</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">},</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">body</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">todos</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">;}));</span>
</span><span class='line'><span class="p">}));</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;listening on port 3000&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="https://github.com/cultofmetatron/koa-todo">Download the code on github</a>
The github version includes frontend code.</p>

<h4>A few things of note:</h4>

<p>The 'yield' keyword ca do some interesting things. If we pass into it
an asynchronous function that returns a thunk or promise, it will stop execution of
the middleware and wait till it resolves. It then returns the value of the promse or thunk
and resumes the generator. This is a hell of alot easier to read.</p>

<h4>A word of caution</h4>

<p>The 'yield' keyword lets us do some safe blocking but it isn't always the ideal solution.
While the event loop itself isn't blocked by it the way futures can, it does block resuming
of any operations that occur after it.</p>

<p>For example, if we run three asyncronous operations top to bottom that do not depend on
each other, like the following...</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span> <span class="o">*</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">async1</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">async2</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">async3</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This completely defeats the purpose of node's (almost automatic) concurrency. When we call
async1, we are blocking until async2 runs. This is unoptimal. It would be better to get the promises
for the three functions and yield on a merged promise.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span> <span class="o">*</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">async1</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">async2</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">async3</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I'm excited to cut my teeth on sme bigger problems. As the frameowrk matures, Its going to
allow more fine grained control for how we write the next generation of web applications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript generators: first impressions]]></title>
    <link href="http://blog.peterdecroos.com/blog/2014/01/22/javascript-generators-first-impressions/"/>
    <updated>2014-01-22T16:03:00-08:00</updated>
    <id>http://blog.peterdecroos.com/blog/2014/01/22/javascript-generators-first-impressions</id>
    <content type="html"><![CDATA[<p>Ecmascript 6 (harmony) is coming out soon and one of the most exciting features
it offers are generators. Generators are a minimalist flow control system that gives
a much finer grained level of control than we were afforded up till now.</p>

<blockquote><p>Note: the code in this blog will only run in node v0.11.x when run as --harmony.</p></blockquote>

<p>Like a function, a generator is an object that declares some behavior. Its first class
just like javascript functions and you can pass it around as values and return them from other
functions.</p>

<p>A generator is declared like a function only with a '*' before the parens.
We then create an instance of the generator by calling it.</p>

<p>Here's a basic example.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myGenerator</span> <span class="o">=</span> <span class="kd">function</span> <span class="o">*</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="nx">yield</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;this doesn&#39;</span><span class="nx">t</span> <span class="nx">get</span> <span class="nx">written</span> <span class="nx">until</span> <span class="nx">the</span> <span class="nx">second</span> <span class="nx">call</span> <span class="nx">to</span> <span class="nx">next</span><span class="p">()</span><span class="err">&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">gen</span> <span class="o">=</span> <span class="nx">myGenerator</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">gen</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="c1">//=&gt; 5&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When we run gen.next(), the code executes until we get to yield. The generator
then stops which is why the console.log() does not get called. The state of the
generator is returned by next which gives us two things.</p>

<ol>
<li>state.value: the value on the right side of the yield; in this case 5.</li>
<li>state.done: a boolean that returns true if there are no more yields in the generator.</li>
</ol>


<p>We've called gen.next() the one time. The second time we call gen.next(), we have the option
of passing in an argument to it that will be returned by yield inside the generator.</p>

<p>This example shows a more advanced example of bidirectional passing.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myGenerator</span> <span class="o">=</span> <span class="kd">function</span> <span class="o">*</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">firstWord</span> <span class="o">=</span> <span class="nx">yield</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">firstWord</span><span class="p">);</span> <span class="c1">//=&gt; &quot;hello&quot;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">secondWord</span> <span class="o">=</span> <span class="nx">yield</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">secondWord</span><span class="p">);</span> <span class="c1">//=&gt; &quot;world&quot;</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">gen</span> <span class="o">=</span> <span class="nx">myGenerator</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">gen</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span> <span class="c1">//=&gt; 5</span>
</span><span class='line'><span class="nx">state</span> <span class="o">=</span> <span class="nx">gen</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; &#39;hello&#39; gets printed to the screen from inside the generator</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span> <span class="c1">//=&gt; 10</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">done</span><span class="p">);</span> <span class="c1">//=&gt; false</span>
</span><span class='line'><span class="nx">state</span> <span class="o">=</span> <span class="nx">gen</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="s1">&#39;world&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; &#39;world&#39; gets printed</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span> <span class="c1">//=&gt; 10</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">done</span><span class="p">);</span>  <span class="c1">//=&gt; true&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>One of the biggest growing pains of javascript development is wrapping one's
head around async programming and functions run asyncronously. Promises give us a
value that represents the eventual value returned from an asynchronous function.</p>

<p>Promises are promised in ecmascript 6 but they aren't available when I run node 0.11
with --harmony  yet so I use <a href="https://github.com/petkaantonov/bluebird">Bluebird</a></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Promise</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;bluebird&#39;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">//extends node&#39;s fileSytem with versions of the async functions that return promises</span>
</span><span class='line'><span class="c1">//the promisified versions are the original name + &#39;Async&#39;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">promisifyAll</span><span class="p">(</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">));</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFileAsync</span><span class="p">(</span><span class="s1">&#39;.gitignore&#39;</span><span class="p">,</span>  <span class="s1">&#39;utf8&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">contents</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">contents</span><span class="p">);</span> <span class="c1">// prints the contents of the .gitignore file.</span>
</span><span class='line'><span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;this runs before the callback passed to &quot;then&quot; which is counterintuitive.&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This code Works because when the function is called, it creates a closure that doesn't get
garbage collected because the function passed to the promise retains a reference to this scope.
When its called, it can operate on variables in this containing scope. However we
cannot return to the original function call. Thus Unless you are used to thinking about promises,
its a bit unintuitive that the console.log on the following line runs before the callback passed
to the then() handler of the promise.</p>

<p>Generators on the other hand, let us FREEZE the execution context until the file resolves.</p>

<p>There's an excellent library called
<a href="https://github.com/visionmedia/co">co</a> from the creator of express that allows
us to create coroutines using generators. thus we could write the previous code using
generators.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Promise</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;bluebird&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">promisifyAll</span><span class="p">(</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">));</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">co</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;co&#39;</span><span class="p">);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">co</span><span class="p">(</span><span class="kd">function</span> <span class="o">*</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileAsync</span><span class="p">(</span><span class="s1">&#39;.gitignore&#39;</span><span class="p">,</span>  <span class="s1">&#39;utf8&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">//this doesn&#39;t run until the previous function resolves.</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">yield</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileAsync</span><span class="p">(</span><span class="s1">&#39;package.json&#39;</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">})();</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is pretty exciting, This Asyncrouous code looks downright synchronous. Its also running
in its own context so it doesn't block the event loop. Within the generator, we can write
much more fine grained flow control for asynchronous functions.</p>

<p>That said, how does co work? The basic premise is that we use yield to pass back the promise
into co where it waits till the function resolves. Then we call the next() of this function
passing in the value from the resolved promise.</p>

<p>co itself is extremely flexible allowing you to pass in thunks, or A+spec promises into
yield. Here I'll demonstrate a simplified version that can accept only promises.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">co</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fngen</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="err">/&lt;em&gt;</span>
</span><span class='line'>  <span class="nx">next</span> <span class="nx">takes</span> <span class="nx">a</span> <span class="nx">instatiated</span> <span class="nx">generator</span> <span class="nx">and</span> <span class="nx">calls</span>
</span><span class='line'>  <span class="nx">and</span> <span class="nx">a</span> <span class="nx">value</span> <span class="nx">returned</span> <span class="nx">from</span> <span class="nx">calling</span> <span class="nx">next</span> <span class="nx">on</span> <span class="nx">it</span>
</span><span class='line'>  <span class="nx">gen</span> <span class="nx">is</span> <span class="nx">an</span> <span class="nx">instance</span> <span class="nx">of</span> <span class="nx">a</span> <span class="nx">generator</span>
</span><span class='line'>  <span class="nx">yieldable</span> <span class="nx">is</span> <span class="nx">the</span> <span class="nx">value</span> <span class="nx">returned</span> <span class="nx">from</span> <span class="nx">calling</span> <span class="nx">gen</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sr">/em&gt;/</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">next</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">gen</span><span class="p">,</span> <span class="nx">yieldable</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nx">yieldable</span><span class="p">.</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//if </span>
</span><span class='line'>  <span class="c1">//we assume yieldable.value is a promise so we call then() to get the value</span>
</span><span class='line'>  <span class="nx">yieldable</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">    we call next on gen and pass in the value into gen.next() to </span>
</span><span class='line'><span class="cm">    inject the value back into out coroutine where it gets returned</span>
</span><span class='line'><span class="cm">    by the yield in the generator. </span>
</span><span class='line'>
</span><span class='line'><span class="cm">    By call gen.next(val), gen resumes execustion passing val back </span>
</span><span class='line'><span class="cm">    and gen.next() return when it hits the next yield keyword returning </span>
</span><span class='line'><span class="cm">    the value passed in to yield.</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="nx">next</span><span class="p">(</span><span class="nx">gen</span><span class="p">,</span> <span class="nx">gen</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">val</span><span class="p">));</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">//instatiate the generator</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">gensym</span> <span class="o">=</span> <span class="nx">fngen</span><span class="p">();</span>
</span><span class='line'><span class="c1">//get the first yieldable</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">yieldable</span> <span class="o">=</span> <span class="nx">gensym</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">yieldable</span><span class="p">.</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">next</span><span class="p">(</span><span class="nx">gensym</span><span class="p">,</span> <span class="nx">yieldable</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">};</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The concept is pretty simple, yield passed back the value on the right to gen.next()
which it returns. The value we pass into the gen.next call to gen.next() becomes
the value returned by yield. Sorta like a zig zag or a needle stitching.</p>

<p>I'm excited to see some of the new projects that will take advantage of this new
ecmascript 6 feature. One big example comming to mind is the new koa framework. Unlike
its predecessor express/connect, Koa is a set of pluggable middleware components
that utilize generators heavily for flow control.</p>
]]></content>
  </entry>
  
</feed>
