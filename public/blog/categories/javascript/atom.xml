<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | console.blog( this.thought )]]></title>
  <link href="http://blog.peterdecroos.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://blog.peterdecroos.com/"/>
  <updated>2013-06-30T20:04:27-07:00</updated>
  <id>http://blog.peterdecroos.com/</id>
  <author>
    <name><![CDATA[Peter de Croos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backbone, a short primer - Part 1]]></title>
    <link href="http://blog.peterdecroos.com/blog/2013/06/02/backbone-primer/"/>
    <updated>2013-06-02T14:42:00-07:00</updated>
    <id>http://blog.peterdecroos.com/blog/2013/06/02/backbone-primer</id>
    <content type="html"><![CDATA[<p>Its been a few months since I've started using backbone on my personal projects.
Its a great library for rolling out MVC structure into your application but the
learning curve is pretty brutal.</p>

<p>The first step to really understanding the backbone.js framework.</p>

<h3>There is no framework</h3>

<p>Seriously, get it out of your head entirely that backbone is a frameowrk. Its far
too minimal. Backbone is more like a toolkit library for contructing MVC frameworks.</p>

<p>Backbone provides the following objects</p>

<ul>
<li><a href="http://backbonejs.org/#Model">Backbone.Model</a></li>
<li><a href="http://backbonejs.org/#Collection">Backbone.Collection</a></li>
<li><a href="http://backbonejs.org/#View">Backbone.View</a></li>
<li><a href="http://backbonejs.org/#Router">Backbone.Router</a></li>
</ul>


<p>The real key is how we use it. Like Chess, it can be
learned very quickly. the problem is that you also need to understand the tectics and strategies.
The offical docs leave alot of that to the imagination.</p>

<h3>Backbone.Model</h3>

<p>Backbone.Model is a storage container where we can add and remove items via <em>set</em> and <em>get</em> attributes</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kd">var</span> <span class="nx">newModel</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">newModel</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="nx">bar</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">newModel</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">)</span> <span class="c1">// =&gt; &#39;bar&#39;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Why don't I use newModel.foo = 'bar'?  The real power in backbone is in the
events that models can fire. By having you access the model's attributes via
<em>set</em> and <em>get</em>, you ensure that the associated callbacks get fired everytime
an attribute is changed.</p>

<h4>Extending Backbone.Model</h4>

<p>Backbone.Model is inherited using extend. This is also where we add methods
that may be specific to our particular subclass of Backbone.Model. For instance,
lets create a Comments model which may contain a username, content, rating
and timestamp.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">Comment</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">//defaults are self explanatory</span>
</span><span class='line'><span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">rating</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * initialize runs whenever new is called, it takes care of</span>
</span><span class='line'><span class="cm"> * setting up __super in the inheritance chain</span>
</span><span class='line'><span class="cm"> * there is also &#39;constructor&#39; which overides the contructor entirely</span>
</span><span class='line'><span class="cm"> * leaving you to manually impliment the prototype chaining.</span>
</span><span class='line'><span class="cm"> * ie: only use constructor if you know what you are doing.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;owner&#39;</span><span class="p">,</span> <span class="nx">getCurrentUser</span><span class="p">());</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;timestamp&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">());</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">upvote</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;rating&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;rating&#39;</span><span class="p">)</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="err">/&lt;em&gt; now we initialize the model passing in values in an object. &lt;/em&gt;/&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">newComment</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Comment</span><span class="p">({</span>
</span><span class='line'><span class="nx">content</span><span class="o">:</span> <span class="s2">&quot;backbone needs a library for reactive databindings&quot;</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">});</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nx">newComment</span><span class="p">.</span><span class="nx">upvote</span><span class="p">().</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;rating&#39;</span><span class="p">);</span> <span class="c1">// =&gt; 1&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here we've set up a basic backbone model for setting representing a comment.
In defaults, we put in an object of default attributes. You may be wondering why I
set up the owner and timestamp attributes in <em>initialize.</em></p>

<p>The defaults object and anything inside it is evaluated into a static object
inside the extend function call. Thus, if you were to try this</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="kd">var</span> <span class="nx">Comment</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">//defaults are self explanatory</span>
</span><span class='line'><span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">rating</span>    <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">owner</span>     <span class="o">:</span> <span class="nx">getCurrentUser</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">timestamp</span> <span class="o">:</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span> <span class="p">})();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>you would find that every instance will have the same timestamp. To get around this,
I have the functionality for those defaults set to run in initialize.</p>

<h4>Backbone.Model events</h4>

<p>Backbone models idealy only broadcast events. Models can contain another model as an attribute.
Backbone.Model's 'change' event only fires when it detects a change in the value of the attribute.
If the value is a model, then a change in that model's attributes won't change the reference
to the model. Unlike the dom, we have to explicitly set up our own event bubbling.</p>

<p>To set up your own event delegation, you have to set up a listener in the parent model to listen for
events in the attribute model.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="kd">var</span> <span class="nx">CommentHolder</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//we set up event listeners here</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;comment&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;all&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">bubble</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">bubble</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// apply is used to propegate all possible arguments</span>
</span><span class='line'>  <span class="c1">// that can be coming form multiple events.</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">})</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="http://backbonejs.org/#Events-catalog">'all'</a> is a backbone defined catch all event that sends
along the name of the event as</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Proceses in node part 1: introduction to processes]]></title>
    <link href="http://blog.peterdecroos.com/blog/2013/04/11/processes-in-node-introduction/"/>
    <updated>2013-04-11T14:26:00-07:00</updated>
    <id>http://blog.peterdecroos.com/blog/2013/04/11/processes-in-node-introduction</id>
    <content type="html"><![CDATA[<p>As a language made to exist within the browser, javascript did not originally
come with a way to do process process related tasks. Until Chrome, browser based
javascript was running within the same process as the browser.</p>

<p>In Chrome, every tab runs in its own process. Consequently, your javascript on any given
page runs in its own process. Now that node has brought javascript into the server and far from
the restrictive confines of the browser, We can do intersting things like run other programs from node.</p>

<h3>What is a process?</h3>

<p>Much like the relationship between a Constructor function + its prototypye and the
object created by invoking the <em>new</em> keyword, a process is an operating system level invocation
of some program.</p>

<h3>Process vs Program - a very high level overview</h3>

<p>Imagine the hardrive that powers your computer. Stored on it is a long range of numbers.
For all practical purposes, we can think of it as a long serial stream of bits layed out. with information
encoded on them. At some magical location is the boot sector. When the computer first starts running,
it startsloading binary data from the hardrive into the RAM and then loads this data into the cpu.
At this point we load the master process which we call the operating system kernal.
The kernal then takes care of managing other processes in the system.</p>

<p>At this point, we get to your program. If we were doing this in <em>C</em>, the the compiler would compile your
source code into binary code which follows an executable format. The actual encoding of this binary instruction
stream varies across cpu architectures and operating systems. They do happen to share some
common characteristics. Most of this information is located in the header of the file as information that tells
the operating system that this code is executable and information on how it is to be run.</p>

<h5>Entry Point Address</h5>

<p>At some point in the binary stream of bytes that is your program, there exists the first instruction that
needs to be loaded into the cpu. The Operating System loads this address into memory and queues it up
for running into the cpu.</p>

<h5>Data</h5>

<p>Constants in the process are stored in the data stream in some area where they can be accessed by the
Process as it runs. This includes mathematical constants such as Math.PI or string error messages.</p>

<h5>Symbol and Lookup Tables.</h5>

<p>To properly explain symbol and lookup table, I need to elaborate on what is going on at the
instruction level on your computer. Basicly, it stores the locations of all the variables and function
entry points. in memory.</p>

<h3>Processes verses threads</h3>

<p>The simple $2 answer is that processes have their own copy of all the data and symbol information. In some languages, multiple threads exist within a process and all share the same data. more importantly, you cannot create threads in node.</p>

<h3>Processes and node</h3>

<p>For us nodesters, the picture gets a bit more complicated. The computer loads up the program instructions
we affectionatly know as node and loads it into memory. From there, the node program as a static set of
bits on the hardrive becomes an almost living thing that loads your javascript into memory and run it!</p>

<p>To clarify, the process running when you run your node program is an instance of the node program. You can
have several node instances running in memory. They can even all serve http requests as long as they are
not trying to bind to the same port.</p>

<p>Understanding processes is incredibly useful. In Ruby, processes forking is used heavily in the design of
<a href="http://unicorn.bogomips.org/">unicorn</a>. Services like nodejitsu and heroku utilize smart people who understand
how processes work to architect systems that run and manage your code on the cloud. More importantly, node code
can only run on one processor at any given time but by using features such as <em>fork</em>, you can set up a master
node process that delegates tasks to subprocesses it spawns yourself. Since node processes are so
lightweight, you could concievably run hundreds on your system at the same time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quicksort Algorithm in Javascript]]></title>
    <link href="http://blog.peterdecroos.com/blog/2013/02/14/quicksort/"/>
    <updated>2013-02-14T18:49:00-08:00</updated>
    <id>http://blog.peterdecroos.com/blog/2013/02/14/quicksort</id>
    <content type="html"><![CDATA[<p>Here's a basic Quicksort algorithm. You can call this code using Node.js</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Sort</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./quicksort.js&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">sorted</span> <span class="o">=</span> <span class="nx">Sort</span><span class="p">(</span><span class="nx">list</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="nx">a</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">a</span> <span class="o">===</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>have fun and hope this proves useful to somebody!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//quicksort.js</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">list1</span><span class="p">,</span> <span class="nx">compareFunction</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="nx">list1</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">cmp</span> <span class="o">=</span> <span class="nx">compareFunction</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">swap</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* swaps the indexer A[i] and A[j] */</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">_i</span> <span class="o">=</span> <span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">_j</span> <span class="o">=</span> <span class="nx">list</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>    <span class="nx">list</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">_i</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">list</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">_j</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">partition</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* the partition function goes through the array</span>
</span><span class='line'><span class="cm">     *  list[</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="nx">r</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">p</span><span class="p">;</span> <span class="c1">//on intiial pass, p is 0</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* for each entry i where A[i] is less than A[r-1]</span>
</span><span class='line'><span class="cm">     * where r-1 is the index of the Penultimate item</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="c1">//from j = 0 to j = r-1</span>
</span><span class='line'>    <span class="c1">//exchange A[i] and A[j] if A[j] &amp;gt; A[r]</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">p</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">r</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//console.log(&quot;lets try this &quot;, list);</span>
</span><span class='line'>        <span class="c1">//console.log(&quot;i : &quot; + i + &quot; j : &quot; + j);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">cmp</span><span class="p">(</span><span class="nx">list</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">list</span><span class="p">[</span><span class="nx">r</span><span class="p">])</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">//swap them!! and then increment i</span>
</span><span class='line'>            <span class="nx">swap</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">swap</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">r</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">quickSort</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">p</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">q</span> <span class="o">=</span> <span class="nx">partition</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">r</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">quickSort</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span> <span class="nx">q</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">quickSort</span><span class="p">(</span><span class="nx">q</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">initialize</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">quickSort</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">list1</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//compute the sorted value</span>
</span><span class='line'><span class="nx">initialize</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">list1</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
