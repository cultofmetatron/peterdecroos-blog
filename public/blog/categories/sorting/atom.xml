<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sorting | console.blog( this.thought )]]></title>
  <link href="http://blog.peterdecroos.com/blog/categories/sorting/atom.xml" rel="self"/>
  <link href="http://blog.peterdecroos.com/"/>
  <updated>2014-02-08T20:26:00-08:00</updated>
  <id>http://blog.peterdecroos.com/</id>
  <author>
    <name><![CDATA[Peter de Croos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quicksort Algorithm in Javascript]]></title>
    <link href="http://blog.peterdecroos.com/blog/2013/02/14/quicksort/"/>
    <updated>2013-02-14T18:49:00-08:00</updated>
    <id>http://blog.peterdecroos.com/blog/2013/02/14/quicksort</id>
    <content type="html"><![CDATA[<p>Here's a basic Quicksort algorithm. You can call this code using Node.js</p>

<p>{% codeblock lang:javascript %}
var Sort = require('./quicksort.js');
list = [3, 4, 5,2, 5];
var sorted = Sort(list, function(a, b) {</p>

<pre><code>if (a &gt; b) {
    return 1;
} else if (a === b) {
    return 0;
} else {
    return -1;
}
</code></pre>

<p>});
{% endcodeblock %}</p>

<p>have fun and hope this proves useful to somebody!</p>

<p>{% codeblock lang:javascript %}
//quicksort.js
module.exports = function(list1, compareFunction) {</p>

<pre><code>var list = list1;
var cmp = compareFunction;

var swap = function(i, j) {
    /* swaps the indexer A[i] and A[j] */
    var _i = list[i];
    var _j = list[j];
    list[j] = _i;
    list[i] = _j;
}

var partition = function(p, r) {
    /* the partition function goes through the array
     *  list[
     */
    var r = r;
    var i = p; //on intiial pass, p is 0

    /* for each entry i where A[i] is less than A[r-1]
     * where r-1 is the index of the Penultimate item
     */
    //from j = 0 to j = r-1
    //exchange A[i] and A[j] if A[j] &gt; A[r]
    for (var j = p; j &lt; r; j++) {
        //console.log("lets try this ", list);
        //console.log("i : " + i + " j : " + j);
        if (cmp(list[j],list[r]) &lt;= 0 ) {
            //swap them!! and then increment i
            swap(i, j);
            i++;
        }
    }

    swap(i, r);
    return i;


}

var quickSort = function(p, r) {
    if (p &lt; r) {
        q = partition(p, r);
        quickSort(p, q - 1);
        quickSort(q + 1, r)

    }

}

var initialize = function() {
    quickSort(0, list1.length-1);

}
//compute the sorted value
initialize();

return list1;
</code></pre>

<p>}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sorting algorithms in python - part 1]]></title>
    <link href="http://blog.peterdecroos.com/blog/2012/09/10/sorting-algorithms-in-python/"/>
    <updated>2012-09-10T00:11:00-07:00</updated>
    <id>http://blog.peterdecroos.com/blog/2012/09/10/sorting-algorithms-in-python</id>
    <content type="html"><![CDATA[<p>I'm in a couple of weeks into Robert Sedgewick's class on algorithms currently
running on <a href="https://www.coursera.org/course/algs4partI">coursera</a>. To round off the weekend
I decided to reimpliment some of the classic sortting algorithms in python.</p>

<p>The compare function</p>

<p>{% codeblock lang:python %}</p>

<pre><code>def cmp(a, b):
    if (a == b):
        return 0
    elif (a &gt; b):
        return 1
    else:
        return -1

def swap(i, j, array):
    swapv = array[i]
    array[i] = array[j]
    array[j] = swapv
    return array

def biggest(array):
    i = 0
    biggest_val = array[0]
    biggest_index = i
    while(i &lt; len(array)):
        if (array[i] &gt; biggest_val):
            biggest_val = array[i]
            biggest_index = i
        i = i + 1
    return (biggest_index, biggest_val)

def minv(array, start_index):
    i = start_index
    min_val = array[start_index]
    min_index = i
    while(i &lt; len(array)):
        if (array[i] &lt; min_val):
            min_val = array[i]
            min_index = i
        i = i + 1
    return (min_index, min_val)

def min(array):
    return minv(array, 0)
</code></pre>

<p>{% endcodeblock %}
Selection Sort
{% codeblock lang:python %}</p>

<pre><code>def selectionSort(array):
    i = 0
    array1 = array
    while (i &lt; len(array1)):
        array1 = swap(i, minv(array1, i)[0], array1)
        i = i + 1
    return array1
</code></pre>

<p>{% endcodeblock %}
Insertion sort is just a specialized case of shellsort so I created a base composite function that encapsulates the core of both algorithms.
{% codeblock lang:python %}</p>

<pre><code>def gapSort(array, gap):
    """helper function to aid insertion sort and shell sort"""
    i = 0
    array1 = array
    while (i &lt; len(array)):
        if (i &gt; 0):
            j = i
            while ((cmp(array1[j], array1[j-gap]) &lt; 0) and (j != 0 ) ):
                #while object at i is less than the one before it
                swap(j, j-gap, array1)
                j = j - 1
        i = i + 1
    return array1

def insertionSort(array):
    return gapSort(array, 1)



def shellSort(array):
    """sorts using the shellsort algorithm"""
    vals = [3*h+1 for h in range(len(array)/3)][::-1]
    for val in vals:
        array = gapSort(array, val)
    return array
</code></pre>

<p>{% endcodeblock %}
Finally, Merge sort; Running in N log(N), it is the only algorithms other than Quicksort
worth using on large datasets.</p>

<p>{% codeblock lang:python %}</p>

<pre><code>def merge(array, p, q, r):
"""The merge function"""
    if ((r - p) &gt; 1):
        left = array[p:q+1]
        loggr("left" + str(left))
        right = array[q+1:r+1]
        loggr("right"+ str(right))
        left.append('c')
        right.append('c')
        i = 0
        j = 0
        for k in range(p, r+1):
            if left[i] &lt;= right[j]:
                array[k] = left[i]
                i = i + 1
            else:
                array[k] = right[j]
                j = j + 1
    elif ((r - p) == 1 ):
        if (array[r] &lt; array[p]):
            i = array[p]
            j = array[r]
            array[p] = j
            array[r] = i



def mergeSort(array):
    def sort(p, r, msg):
        if p &lt; r:
            q = (p+r)/2
            if (r - p) &gt; 1:
                sort(p, q, "in left array")
                sort(q+1, r, "right array")
            merge(array, p, q, r)
    sort(0, len(array)-1, "root")
    return array
</code></pre>

<p>{% endcodeblock %}</p>

<p>Quick sort and its probabilistic guarantee of fast enough run time strikes me as the most
mathematically perverse form of black magic. Beautiful in the inherent underlying fabric
of its utility. I'll cover that when I get to part 2.</p>
]]></content>
  </entry>
  
</feed>
