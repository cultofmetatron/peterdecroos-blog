<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: event-driven | Interview with a Turing Mage]]></title>
  <link href="http://blog.peterdecroos.com/blog/categories/event-driven/atom.xml" rel="self"/>
  <link href="http://blog.peterdecroos.com/"/>
  <updated>2012-09-19T17:38:48-04:00</updated>
  <id>http://blog.peterdecroos.com/</id>
  <author>
    <name><![CDATA[Peter de Croos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[understanding priority queues]]></title>
    <link href="http://blog.peterdecroos.com/blog/2012/09/18/understanding-priority-queues/"/>
    <updated>2012-09-18T20:12:00-04:00</updated>
    <id>http://blog.peterdecroos.com/blog/2012/09/18/understanding-priority-queues</id>
    <content type="html"><![CDATA[<p>Node.js, twisted, eventmachine and gevent are all the rage amongst the cool kids
these days. Despite their inherent popularity, there seems to be a gap in the
understanding of what drives this particular paradigm of scalable architecture.</p>

<p>The event driven system of programming at its core revolves around the concept of
a central event loop running through a list of nonblocking procedures. Ok, thats
kind of a mouthful and probably doesn't mean much unless you already know how to
implement one already.</p>

<p>To put it more concretely, Lets flesh out the situation in more concrete terms. Imagine Sam the intern. Sam does alot of things around the office and each one takes a certain amount of time to do.</p>

<p>For the sake of simpicity, Sam is majoring in comparative literature so he's not going to be doing any career related work. He's the office bitch.</p>

<ul>
<li>making coffee -  5 min</li>
<li>collate papers from the printer - 2 min + 20 seconds per page</li>
<li>write annual TPS report - 20 min</li>
<li>deliver mail to the desks -10 min</li>
<li>call for takeout - 5min</li>
<li>take out the trash - 2 min</li>
<li>clean computer screens - 1 min per computer</li>
</ul>


<p>You'll notice that Sam is only doing tasks within O(N) time. ie: the time it takes to perform a tasks grows linearly with the size of the task itself.  Theres a good reason for that. For now, Suffice to say that giving Sam a task where the the big O is quadratic is gonna give you a bad time. I'll cover this in more detail later on. For more info on orders of growth, <a href="http://en.wikipedia.org/wiki/Big_O_notation">wikipedia FTW</a>.</p>
]]></content>
  </entry>
  
</feed>
